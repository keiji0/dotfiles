#!/bin/sh
# goをインストールするスクリプト
#
# ソースからインストールする場合
# 1.5からセルフホスティングされているので1.4系を先にインストールする必要がある
# またmacOS Sierraになってv1.7以前で実行時エラーが発生するため
# それ以降のバイナリをインストールする必要がある

set -e
BOOTSTRAP_VERSION=go1.7.1

# 引数処理
VERSION=$1
VERSION_NAME=go$VERSION
TARGET_DIR=$2
[ -z "$VERSION" ] && echo 'error: VERSIONを指定してください' 1>&2 && exit 1
[ -z "$TARGET_DIR" ] && echo 'error: インストールするディレクトリを指定してください' 1>&2 && exit 1

main()
{
    # bootstrap用のgoのインストール
    # bootstrap=$(mktemp -d /tmp/$USER-go-XXXXXX)
    # trap 'rm -rf "$bootstrap"' EXIT
    binary_install "${VERSION_NAME}" "${TARGET_DIR}"

    # 指定のgoのインストール
    # source_install "${VERSION_NAME}" "${TARGET_DIR}" "$bootstrap/go"
}

source_install()
{
    # インストール参照
    # https://golang.org/doc/install/source#go14
    version_name="$1"
    target_dir="$2"
    bootstrap="$3"
    is_installed "$target_dir" && echo '既にインストール済みです' && exit 0
    mkdir -p "$target_dir"
    curl -sL $(source_package_url "${version_name}") | tar xz --strip=1 -C "$target_dir"
    cd "$target_dir/src"
    GOROOT_BOOTSTRAP="$bootstrap" ./all.bash
}

binary_install()
{
    version_name="$1"
    target_dir="$2"
    is_installed "$target_dir" && echo '既にインストール済みです' && exit 0
    mkdir -p "$target_dir"
    curl -sL $(binary_package_url "${version_name}") | tar xz --strip=1 -C "$target_dir"
}

source_package_url()
{
    version_name="$1"
    echo "https://storage.googleapis.com/golang/${version_name}.src.tar.gz"
}

binary_package_url()
{
    version_name="$1"
    # 以下を参照
    # https://golang.org/dl/
    case "$(uname)" in
         Darwin) echo "https://storage.googleapis.com/golang/${version_name}.darwin-amd64.tar.gz";;
         Linux) echo "https://storage.googleapis.com/golang/${version_name}.linux-386.tar.gz";;
         *) echo 'error: パッケージURLが判別できませんでした' 1>&2 && exit 1
    esac
}

is_installed()
{
    dir="$1"
    [ -d "$dir" ] && return 0
    [ -d "$dir/bin/go" ] && return 0
    return 1
}

main
